GPU list: [0, 1, 2, 3]
[
    {
        "learn_pos_emb": true,
        "tied_weights": false,
        "embedding_dim": 64,
        "transformer_dim": 64,
        "transformer_hidden_dim": 128,
        "head_dim": 32,
        "num_head": 2,
        "num_layers": 2,
        "vocab_size": 256,
        "max_seq_len": 1024,
        "dropout_prob": 0.1,
        "attention_dropout": 0.1,
        "pooling_mode": "MEAN",
        "num_classes": 10,
        "block_size": 32,
        "batch_size": 128,
        "density": 0.05,
        "mixed_precision": true,
        "random_seed": 10,
        "task": "lra-image"
    },
    {
        "batch_size": 512,
        "learning_rate": 0.002,
        "warmup": 175,
        "lr_decay": "linear",
        "weight_decay": 0,
        "eval_frequency": 500,
        "num_train_steps": 10000,
        "num_init_steps": 0,
        "num_eval_steps": 20,
        "num_dense_train_steps": 1000,
        "attn_loss_scale": 0.01
    }
]
attn compile
attn compile
DataParallel(
  (module): ModelForSC(
    (model): Model(
      (embeddings): Embeddings(
        (word_embeddings): Embedding(256, 64)
        (position_embeddings): Embedding(1024, 64)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (transformer_0): TransformerLayer(
        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (mha): Attention(
          (W_q): Linear(in_features=64, out_features=64, bias=True)
          (W_k): Linear(in_features=64, out_features=64, bias=True)
          (W_v): Linear(in_features=64, out_features=64, bias=True)
          (avg_pool): AvgPool2d(kernel_size=32, stride=32, padding=0)
          (MSEloss): MSELoss()
          (attn): CUDAAttention()
          (ff): Linear(in_features=64, out_features=64, bias=True)
        )
        (dropout1): Dropout(p=0.1, inplace=False)
        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (mlpblock): Sequential(
          (0): Linear(in_features=64, out_features=128, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.1, inplace=False)
          (3): Linear(in_features=128, out_features=64, bias=True)
          (4): Dropout(p=0.1, inplace=False)
        )
      )
      (transformer_1): TransformerLayer(
        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (mha): Attention(
          (W_q): Linear(in_features=64, out_features=64, bias=True)
          (W_k): Linear(in_features=64, out_features=64, bias=True)
          (W_v): Linear(in_features=64, out_features=64, bias=True)
          (avg_pool): AvgPool2d(kernel_size=32, stride=32, padding=0)
          (MSEloss): MSELoss()
          (attn): CUDAAttention()
          (ff): Linear(in_features=64, out_features=64, bias=True)
        )
        (dropout1): Dropout(p=0.1, inplace=False)
        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (mlpblock): Sequential(
          (0): Linear(in_features=64, out_features=128, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.1, inplace=False)
          (3): Linear(in_features=128, out_features=64, bias=True)
          (4): Dropout(p=0.1, inplace=False)
        )
      )
      (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
    )
    (seq_classifer): SCHead(
      (mlpblock): Sequential(
        (0): Linear(in_features=64, out_features=128, bias=True)
        (1): ReLU()
        (2): Linear(in_features=128, out_features=10, bias=True)
      )
    )
  )
)
parameter_size: [torch.Size([256, 64]), torch.Size([1024, 64]), torch.Size([64]), torch.Size([64]), torch.Size([32, 32]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64]), torch.Size([64]), torch.Size([128, 64]), torch.Size([128]), torch.Size([64, 128]), torch.Size([64]), torch.Size([64]), torch.Size([64]), torch.Size([32, 32]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64, 64]), torch.Size([64]), torch.Size([64]), torch.Size([64]), torch.Size([128, 64]), torch.Size([128]), torch.Size([64, 128]), torch.Size([64]), torch.Size([64]), torch.Size([64]), torch.Size([128, 64]), torch.Size([128]), torch.Size([10, 128]), torch.Size([10])]
num_parameter: 160650
Loaded ../Skyformer/data/lra_processed/lra-image.train.pickle... size=45000
Loaded ../Skyformer/data/lra_processed/lra-image.dev.pickle... size=5000
Loaded ../Skyformer/data/lra_processed/lra-image.test.pickle... size=10000
accumu_steps=1
module.model.transformer_0.mha.pattern saved
module.model.transformer_1.mha.pattern saved
./pickle/lra-image/module.model.transformer_0.mha.pattern.pickle
tensor([ 693,  264,  660,  528,  759,    0,  924,  561,  792,  462,  330,  429,
         165,   99, 1023,  957,   66,  231,  476,  910,  594,  627,  279,  744,
         796,  920,  276,  648,  198,  695,  757,  472,  782,  700,  917,  284,
         904,  536,  784,  764,  919,  825,  532,  656,  117,  675,  336,  522,
         529,  560,  668], device='cuda:0')
tensor(51, device='cuda:0')
block_attn compile
./pickle/lra-image/module.model.transformer_1.mha.pattern.pickle
tensor([ 231,  297,  990,  198,  792,  363,   33,   66,  627,  264,  825, 1023,
         957,  528,  561,  726,  318,  969,  924,  254,  967,  330,  495,    0,
         382,  971,  199,  230,  248,  775,  165,  759,  858,  381,  939,   38,
         193,  132,  299,  361,  305,  553,  462,  232,  263,   41,  289,  235,
         359,  313,  809], device='cuda:0')
tensor(51, device='cuda:0')
block_attn compile
total pattern searching time (s): 0.005280971527099609
[]
best model saved: step =  499 dev accu =  tensor(0.3591, device='cuda:0')

Validation Results
Global Steps: 499
Valid Loss: 1.78805
Valid Accuracy: 0.35908
time stamp: 86.90776205062866
[]
best model saved: step =  999 dev accu =  tensor(0.3852, device='cuda:0')

Validation Results
Global Steps: 999
Valid Loss: 1.73856
Valid Accuracy: 0.38516
time stamp: 122.26682209968567
[]
best model saved: step =  1499 dev accu =  tensor(0.3935, device='cuda:0')

Validation Results
Global Steps: 1499
Valid Loss: 1.70797
Valid Accuracy: 0.39346
time stamp: 157.7776575088501
[]
best model saved: step =  1999 dev accu =  tensor(0.3984, device='cuda:0')

Validation Results
Global Steps: 1999
Valid Loss: 1.72681
Valid Accuracy: 0.39844
time stamp: 193.36096000671387
[]
best model saved: step =  2499 dev accu =  tensor(0.4005, device='cuda:0')

Validation Results
Global Steps: 2499
Valid Loss: 1.75468
Valid Accuracy: 0.40049
time stamp: 229.00432085990906
[]
best model saved: step =  2999 dev accu =  tensor(0.4053, device='cuda:0')

Validation Results
Global Steps: 2999
Valid Loss: 1.79285
Valid Accuracy: 0.40527
time stamp: 264.4590826034546
[]
best model saved: step =  3499 dev accu =  tensor(0.4162, device='cuda:0')

Validation Results
Global Steps: 3499
Valid Loss: 1.78159
Valid Accuracy: 0.41621
time stamp: 300.06704926490784
[]

Validation Results
Global Steps: 3999
Valid Loss: 1.89368
Valid Accuracy: 0.39727
time stamp: 335.61972546577454
[]

Validation Results
Global Steps: 4499
Valid Loss: 1.91925
Valid Accuracy: 0.39678
time stamp: 371.3165011405945
[]

Validation Results
Global Steps: 4999
Valid Loss: 1.98301
Valid Accuracy: 0.38027
time stamp: 406.88800597190857
[]

Validation Results
Global Steps: 5499
Valid Loss: 1.93878
Valid Accuracy: 0.39717
time stamp: 442.68003702163696
[]

Validation Results
Global Steps: 5999
Valid Loss: 1.96577
Valid Accuracy: 0.39873
time stamp: 478.4211993217468
[]

Validation Results
Global Steps: 6499
Valid Loss: 2.04918
Valid Accuracy: 0.38779
time stamp: 513.9230532646179
[]

Validation Results
Global Steps: 6999
Valid Loss: 2.04247
Valid Accuracy: 0.40146
time stamp: 549.4212591648102
[]

Validation Results
Global Steps: 7499
Valid Loss: 2.04482
Valid Accuracy: 0.40107
time stamp: 585.3058049678802
[]

Validation Results
Global Steps: 7999
Valid Loss: 2.09246
Valid Accuracy: 0.39189
time stamp: 620.5999655723572
[]

Validation Results
Global Steps: 8499
Valid Loss: 2.13485
Valid Accuracy: 0.38721
time stamp: 656.2411422729492
[]

Validation Results
Global Steps: 8999
Valid Loss: 2.16685
Valid Accuracy: 0.39092
time stamp: 692.612786769867
[]

Validation Results
Global Steps: 9499
Valid Loss: 2.30295
Valid Accuracy: 0.37910
time stamp: 728.1870713233948
[]

Validation Results
Global Steps: 9999
Valid Loss: 2.19726
Valid Accuracy: 0.39619
time stamp: 763.9267420768738
total training step (k): 10.0
total training time (s): 763.9270865917206
total training time (ms): 12948.865112304688
peak memory usage (MB): 8036
allocated memory usage (MB): 48821433
|===========================================================================|
|                  PyTorch CUDA memory summary, device ID 0                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |    9993 KB |    8036 MB |   47677 GB |   47677 GB |
|       from large pool |    6144 KB |    8030 MB |   47312 GB |   47312 GB |
|       from small pool |    3849 KB |      15 MB |     364 GB |     364 GB |
|---------------------------------------------------------------------------|
| Active memory         |    9993 KB |    8036 MB |   47677 GB |   47677 GB |
|       from large pool |    6144 KB |    8030 MB |   47312 GB |   47312 GB |
|       from small pool |    3849 KB |      15 MB |     364 GB |     364 GB |
|---------------------------------------------------------------------------|
| GPU reserved memory   |    8612 MB |    8612 MB |    8612 MB |       0 B  |
|       from large pool |    8596 MB |    8596 MB |    8596 MB |       0 B  |
|       from small pool |      16 MB |      16 MB |      16 MB |       0 B  |
|---------------------------------------------------------------------------|
| Non-releasable memory |   10487 KB |    1109 MB |   40813 GB |   40813 GB |
|       from large pool |   10240 KB |    1106 MB |   40362 GB |   40362 GB |
|       from small pool |     247 KB |       4 MB |     451 GB |     451 GB |
|---------------------------------------------------------------------------|
| Allocations           |     228    |     304    |    5153 K  |    5153 K  |
|       from large pool |       2    |      49    |    1786 K  |    1786 K  |
|       from small pool |     226    |     285    |    3367 K  |    3367 K  |
|---------------------------------------------------------------------------|
| Active allocs         |     228    |     304    |    5153 K  |    5153 K  |
|       from large pool |       2    |      49    |    1786 K  |    1786 K  |
|       from small pool |     226    |     285    |    3367 K  |    3367 K  |
|---------------------------------------------------------------------------|
| GPU reserved segments |      30    |      30    |      30    |       0    |
|       from large pool |      22    |      22    |      22    |       0    |
|       from small pool |       8    |       8    |       8    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       9    |      23    |    2659 K  |    2659 K  |
|       from large pool |       2    |      15    |     660 K  |     660 K  |
|       from small pool |       7    |      15    |    1998 K  |    1998 K  |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

loading the best model from: ./checkpoints/checkpoints-10/lra-image/learnable.model
Evaluation Results
Loss: 1.77635
Accuracy: 0.41900
